unit DistTran;

//copy from ...
  
uses Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, DB, ADODB, OleDB, COmObj, ADOInt;

function  DTCTransactionStart: ITransaction;
procedure DTCTransactionCommit(ATransaction:ITransaction);
procedure DTCTransactionRollback(ATransaction:ITransaction);

procedure JoinSessionIntoTransaction(AConnectionArray:array of TADOConnection;
  ATransaction:ITransaction);
procedure UnJoinSession(AConnectionArray:array of TADOConnection);

implementation

function DtcGetTransactionManager(
  hostName:PChar;
  tmName:PChar;
  iid:Pointer;
  dwReserved1:DWord;
  wReserved2:Word;
  pvReserved:Pointer;
  out txnDispenser:ITransactionDispenser
): HResult; cdecl; external 'xolehlp.dll';

function DTCTransactionStart:ITransaction;
var
  ID: ITransactionDispenser;
begin
  Result:=nil;
  OLECheck(DtcGetTransactionManager(
    nil
    , nil
    , @IID_ITransactionDispenser
    , 0
    , 0
    , nil
    ID)
  );

  OLECheck(
    ID.BeginTransaction(
      nil
      , $1000
      , ISOFLAG_RETAIN_DONTCARE
      , nil
      , Result
    )
  );
end;

procedure DTCTransactionCommit(ATransaction:ITransaction);
begin
  OLECheck(ATransaction.Commit(false,0,0));
end;

procedure DTCTransactionRollback(ATransaction:ITransaction);
var
  B:BOID;
begin
  OLECheck(ATransaction.Abort(@B,false,false));
end;

procedure JoinSessionIntoTransaction(AConnectionArray:array of TADOConnection;
  ATransaction:ITransaction);
var
  ICC:ADOConnectionConstruction;
  ISP:IInterface;
  ITJ:ITransactionJoin;
  i:integer;
begin
  for i:=Low(AConnectionArray) to High(AConnectionArray) do
  begin
    if not AConnectionArray[i].Connected then AConnectionArray[i].Open;
    OLECheck(AConnectionArray[i].ConnectionObject.QueryInterface(
      IID_ADOConnectionConstruction,ICC));
    ISP:=ICC.Get_Session;
    OLECheck(ISP.QueryInterface(IID_ITransactionJoin,ITJ));
    OLECheck(ITJ.JoinTransaction(ATransaction,$1000,0,nil));
  end;
end;

procedure UnJoinSession(AConnectionArray:array of TADOConnection);
var
  ICC:ADOConnectionConstruction;
  ISP:IInterface;
  ITJ:ITransactionJoin;
  i:integer;
begin
  for i:=Low(AConnectionArray) to High(AConnectionArray) do
  begin
    if AConnectionArray[i].Connected then
    begin
      OLECheck(AConnectionArray[i].ConnectionObject.QueryInterface(
        IID_ADOConnectionConstruction,ICC));
      ISP:=ICC.Get_Session;
      OLECheck(ISP.QueryInterface(IID_ITransactionJoin,ITJ));
      OLECheck(ITJ.JoinTransaction(nil,0,0,nil));
    end;
  end;
end;

